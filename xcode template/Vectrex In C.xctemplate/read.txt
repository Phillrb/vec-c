//
// 	Created by Phillip Riscombe-Burton on 04/04/2015.
//  Copyright (c) 2015 Phillip Riscombe-Burton. All rights reserved.
//
//	Permission is hereby granted, free of charge, to any person obtaining a
//	copy of this software and associated documentation files (the
//	"Software"), to deal in the Software without restriction, including
//	without limitation the rights to use, copy, modify, merge, publish,
//	distribute, sublicense, and/or sell copies of the Software, and to
//	permit persons to whom the Software is furnished to do so, subject to
//	the following conditions:
//
//	The above copyright notice and this permission notice shall be included
//	in all copies or substantial portions of the Software.
//
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//	OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//	MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
//	CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
//	TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
//	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// ***************************************************************
// If you would like to contribute to 'Vec-C' then please do so!
// http://www.github.com/phillrb
// ***************************************************************

General:
- as6809 implements a different syntax to AS09 (for MSDOS) that online examples tend to use
- intel x86 assembly is used

Specific:
1. For each BIOS function called from C there has to be an assembler stub. (‘crt0.S’)

The stub saves the state (registers that will be destroyed [see the BIOS documentation], stack and usually the program counter), marshals the parameters, then jumps to the BIOS routine and on exit restores the state.
    - There's no pre-built ones; we have to create them as needed.

2. For each BIOS function there must be a C method defined. ('vectrex.h') - define globals for memory location for things like scale, etc. Standard CDECL naming conventions dictate that a C function with the name “hitMe” will need to be defined in assembler with an underscore prefix (an assembler global of “_hitMe”).

3. 'crt.s' is a list of all known BIOS functions (and has a space saving feature for the final ROM)
    - commented out = not implemented yet
    - uncommented && 1 = in the ROM
    - uncommented && 0 = not in the ROM

4. build schemes run the binary in ParaJVE or could debug the binary in Mess / MAME

5. build script and also the assembler specify:
    - the base memory location of the ROM
    - the memory location,
    - which code will go where